<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:classess="clr-namespace:EnsureRisk.Classess"
                    xmlns:business="clr-namespace:EnsureBusinesss.Business;assembly=EnsureBusinesss"
                    xmlns:system="clr-namespace:System;assembly=mscorlib">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.PopupBox.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    <BooleanToVisibilityConverter x:Key="BoolToVisConverter"/>

    <Style x:Key="TextStyle">
        <Setter Property="TextBlock.TextWrapping" Value="Wrap"/>
        <Setter Property="TextBlock.TextAlignment" Value="Justify"/>
    </Style>
    <Style x:Key="CustomColumnHeader" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="BorderThickness" Value="0,0,1,0"/>
        <Setter Property="BorderBrush" Value="LightGray"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="TextBlock.FontSize" Value="12" />
        <Setter Property="TextBlock.FontWeight" Value="Medium" />
        <Setter Property="Padding" Value="{Binding RelativeSource={RelativeSource Self}, Path=(md:DataGridAssist.ColumnHeaderPadding)}" />
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignColumnHeader}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="GoToVisible">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SortDirectionIndicator" Storyboard.TargetProperty="Width">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="12" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="GoToHidden">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SortDirectionIndicator" Storyboard.TargetProperty="Width">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="12" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                            <Grid Background="Transparent">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <md:ListSortDirectionIndicator Grid.Column="0" Width="0" Height="12" x:Name="SortDirectionIndicator" ListSortDirection="{TemplateBinding SortDirection}"/>
                                <ContentPresenter Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}"/>
                            </Grid>
                        </Border>
                        <Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" Style="{StaticResource MaterialDesignGridColumnHeaderGripper}"/>
                        <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Style="{StaticResource MaterialDesignGridColumnHeaderGripper}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}" />
                        </Trigger>
                        <Trigger Property="SortDirection" Value="Ascending">
                            <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}" />
                        </Trigger>
                        <Trigger Property="SortDirection" Value="Descending">
                            <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}" />
                        </Trigger>
                        <Trigger SourceName="SortDirectionIndicator" Property="IsNeutral" Value="False">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource GoToVisible}" Name="GoToVisible" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="GoToVisible" />
                                <BeginStoryboard Storyboard="{StaticResource GoToHidden}" />
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Button Style="{DynamicResource MaterialDesignToolForegroundButton}" x:Key="Delete" Content="{md:PackIcon Kind=Delete}" ToolTip="Remove this group"/>
    <ToggleButton x:Key="togleStyle" Style="{StaticResource MaterialDesignActionToggleButton}" Content="{md:PackIcon Kind=Close}"/>
    <Button Style="{DynamicResource MaterialDesignToolForegroundButton}" x:Key="DeleteRow" Content="{md:PackIcon Kind=Delete}" ToolTip="Remove this group"/>
    <Style x:Key="errorStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Padding" Value="-2"/>
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"/>
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0 0 0 1"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="CaretBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Bottom"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu>
                    <MenuItem Command="Cut">
                        <MenuItem.Icon>
                            <md:PackIcon Kind="ContentCut"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="Copy">
                        <MenuItem.Icon>
                            <md:PackIcon Kind="ContentCopy" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="Paste">
                        <MenuItem.Icon>
                            <md:PackIcon Kind="ContentPaste"/>
                        </MenuItem.Icon>
                    </MenuItem>
                </ContextMenu>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="Background" Value="Red"/>
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="errorCMStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Padding" Value="-2"/>
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"/>
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0 0 0 1"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="CaretBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Bottom"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu>
                    <MenuItem Command="Cut">
                        <MenuItem.Icon>
                            <md:PackIcon Kind="ContentCut"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="Copy">
                        <MenuItem.Icon>
                            <md:PackIcon Kind="ContentCopy" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="Paste">
                        <MenuItem.Icon>
                            <md:PackIcon Kind="ContentPaste"/>
                        </MenuItem.Icon>
                    </MenuItem>
                </ContextMenu>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="Background" Value="Red"/>
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>    

    <Style x:Key="PopupWBS" TargetType="{x:Type md:PopupBox}" BasedOn="{StaticResource MaterialDesignMultiFloatingActionPopupBox}">
        <Setter Property="PopupContent">
            <Setter.Value>
                <StackPanel Orientation="Horizontal">
                    <Button Style="{DynamicResource MaterialDesignFloatingActionMiniLightButton}" x:Name="BtnAddWBS" Command="{Binding AddWBSCommand}" Content="{md:PackIcon Kind=Add}" Width="32" Height="32" ToolTip="Add WBS">
                        <Button.CommandParameter>
                            <system:Boolean>True</system:Boolean>
                        </Button.CommandParameter>
                    </Button>
                    <Button Style="{DynamicResource MaterialDesignFloatingActionMiniLightButton}" x:Name="BtnCollapseWBS" Command="{Binding CollapseWBSCommand}" Content="{md:PackIcon Kind=ContentCopy}" Width="32" Height="32" ToolTip="Collapse All"/>
                    <Button Style="{DynamicResource MaterialDesignFloatingActionMiniLightButton}" x:Name="BtnDeselect" Command="{Binding UnSelectWBSCommand}" Content="{md:PackIcon Kind=ArrowBack}" Width="32" Height="32" ToolTip="DeSelect"/>
                    <Button Style="{DynamicResource MaterialDesignFloatingActionMiniLightButton}" x:Name="BtnSettings" Command="{Binding UnSelectWBSCommand}" Content="{md:PackIcon Kind=Settings}" Width="32" Height="32" ToolTip="WBS Settings"/>
                </StackPanel>
            </Setter.Value>
        </Setter>
    </Style>

    <TextBox x:Key="damageTextBox" Style="{StaticResource errorStyle}"/>    

    <business:MyTreeItemGroup IsExpanded="True" x:Key="Mytree">
        <business:MyTreeItemGroup.Header>
            <StackPanel Orientation="Vertical">
                <TextBlock Text="Group Name" HorizontalAlignment="Center"/>
                <StackPanel Orientation="Horizontal">
                    <business:MyGroupButton Command="{Binding AddRiskToGroupCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" 
                                                    CommandParameter="{Binding Path=IdGroup, RelativeSource={RelativeSource AncestorType={x:Type business:MyTreeItemGroup}}}" Margin="0 0 10 0" Content="{md:PackIcon Kind=PlusBoxOutline}" Style="{DynamicResource MaterialDesignToolForegroundButton}" ToolTip="Add More"/>
                    <business:MyGroupButton Command="{Binding RenameGroupCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" 
                                                    CommandParameter="{Binding Path=IdGroup, RelativeSource={RelativeSource AncestorType={x:Type business:MyTreeItemGroup}}}"  Content="{md:PackIcon Kind=Pencil}" Style="{DynamicResource MaterialDesignToolForegroundButton}" ToolTip="Rename Group"/>
                    <business:MyGroupButton Command="{Binding RemoveFilterGroupCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" 
                                                    CommandParameter="{Binding Path=IdGroup, RelativeSource={RelativeSource AncestorType={x:Type business:MyTreeItemGroup}}}"  Margin="0 0 10 0" Content="{md:PackIcon Kind=DeleteForeverOutline}" Style="{DynamicResource MaterialDesignToolForegroundButton}" ToolTip="Remove the filter"/>
                    <business:MyGroupButton Command="{Binding RemoveGroupCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" 
                                                    CommandParameter="{Binding Path=IdGroup, RelativeSource={RelativeSource AncestorType={x:Type business:MyTreeItemGroup}}}"  Margin="0 0 10 0" Content="{md:PackIcon Kind=DeleteForever}" Style="{DynamicResource MaterialDesignToolForegroundButton}" ToolTip="Remove the group (delete from database)"/>
                    <business:MyGroupButton Command="{Binding EnableDisableGroupCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Content="{md:PackIcon Kind=ToggleSwitch}" Style="{DynamicResource MaterialDesignToolForegroundButton}" ToolTip="Enable/Disable"/>
                </StackPanel>
            </StackPanel>
        </business:MyTreeItemGroup.Header>
        <!--<DataGrid AutoGenerateColumns="False" ItemsSource="{Binding DvTableGroup}" CanUserAddRows="False" CanUserDeleteRows="False" CanUserReorderColumns="False" CanUserSortColumns="False">
                    <DataGrid.Columns>
                        <DataGridTemplateColumn>
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Button Content="{md:PackIcon Kind=Trash}" Width="25" Height="25" Style="{StaticResource MaterialDesignFloatingActionMiniDarkButton}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <DataGridTextColumn Header="Element" Binding="{Binding Element}"/>
                        <DataGridTextColumn Header="Name" Binding="{Binding Name}"/>
                        <DataGridTextColumn Header="Father" Binding="{Binding Father}"/>
                        <DataGridTextColumn Header="Probability" Binding="{Binding Probability}"/>
                    </DataGrid.Columns>
                </DataGrid>-->
    </business:MyTreeItemGroup>


    <Style x:Key="TextRiskNameStyle" TargetType="{x:Type TextBox}">
        <Setter Property="TextBlock.TextWrapping" Value="Wrap"/>
        <Setter Property="TextBlock.TextAlignment" Value="Justify"/>
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"/>
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0 0 0 1"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="CaretBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Bottom"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu>
                    <MenuItem Command="Cut">
                        <MenuItem.Icon>
                            <md:PackIcon Kind="ContentCut"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="Copy">
                        <MenuItem.Icon>
                            <md:PackIcon Kind="ContentCopy" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="Paste">
                        <MenuItem.Icon>
                            <md:PackIcon Kind="ContentPaste"/>
                        </MenuItem.Icon>
                    </MenuItem>
                </ContextMenu>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>