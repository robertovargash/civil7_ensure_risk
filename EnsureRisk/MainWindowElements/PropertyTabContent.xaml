<ScrollViewer x:Class="EnsureRisk.PropertyTabContent"
             xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes"  
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:EnsureRisk"
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             xmlns:business="clr-namespace:EnsureBusinesss.Business;assembly=EnsureBusinesss"
             Background="{DynamicResource MaterialDesignPaper}"
             TextElement.Foreground="{DynamicResource MaterialDesignBody}"
             TextElement.FontWeight="Medium"
             TextElement.FontSize="14"
             FontFamily="pack://application:,,,/MaterialDesignThemes.Wpf;component/Resources/Roboto/#Roboto"
             xmlns:data="clr-namespace:DataMapping.Data;assembly=DataMapping"
             xmlns:system="clr-namespace:System;assembly=mscorlib"
             xmlns:decimalconv="clr-namespace:EnsureRisk.DataBinding"
             xmlns:classes="clr-namespace:EnsureRisk.Classess"
              xmlns:wf="clr-namespace:System.Windows.Forms;assembly=System.Windows.Forms"
             mc:Ignorable="d" VerticalScrollBarVisibility="Auto" x:Name="thisComponent"
              xmlns:behaviors="clr-namespace:WPFTextBoxAutoComplete;assembly=WPFTextBoxAutoComplete">
    <ScrollViewer.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.PopupBox.xaml"/>
                <ResourceDictionary Source="/EnsureRisk;component/Dictionaries/Styless.xaml"/>
                <ResourceDictionary Source="/EnsureRisk;component/Dictionaries/Menus.xaml"/>
                <ResourceDictionary Source="/EnsureRisk;component/Dictionaries/AutoCompleteTextBox.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <BooleanToVisibilityConverter x:Key="BoolToVisConverter" />
            <local:OpositeBoolToVisibilityConverter x:Key="OpositeBoolToVisConverter" />
            <local:BoolToCMProbabilityConverter x:Key="BoolToCMConverter" />
            <local:BoolToCMProbabilityShortConverter x:Key="BoolToCMShortConverter" />
            <local:BoolToCheckConverter x:Key="CheckConverter" />
        </ResourceDictionary>
    </ScrollViewer.Resources>
    <StackPanel Orientation="Vertical" x:Name="WrapRisk" DataContext="{Binding ElementName=thisComponent, Path=DataContext}" 
                Visibility="{Binding Path = ShowRiskData, Converter={StaticResource BoolToVisConverter} }">
        <ComboBox x:Name="TextRisk" Margin="10" IsEnabled="{Binding Path = HasAccess}" md:HintAssist.Hint="Line name" md:HintAssist.IsFloating="True" MinWidth="150" TextOptions.TextHintingMode="Animated" VerticalAlignment="Bottom" IsEditable="True" ItemsSource="{Binding RiskNameList, RelativeSource={RelativeSource AncestorType={x:Type Window}}}">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="LostFocus">
                    <i:InvokeCommandAction Command="{Binding TextRisk_LostFocusCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="TextChanged">
                    <i:InvokeCommandAction Command="{Binding RiskName_TextChangedCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <ComboBox.Text>
                <Binding Path="RiskLineName" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <local:NotEmptyValidationRule ValidatesOnTargetUpdated="True"/>
                    </Binding.ValidationRules>
                </Binding>
            </ComboBox.Text>
            <ComboBox.ItemsPanel>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel />
                </ItemsPanelTemplate>
            </ComboBox.ItemsPanel>
        </ComboBox>
        <TextBox Margin="10" Style="{StaticResource MaterialDesignOutlinedTextFieldTextBox}" HorizontalAlignment="Stretch" MinWidth="150" 
                                                 IsEnabled="{Binding Path = HasAccess}" 
                                                 md:HintAssist.Hint="Comments" md:HintAssist.IsFloating="True" DataContext="{Binding ElementName=thisComponent, Path=DataContext}" x:Name="TextRiskDetail" TextWrapping="Wrap" 
                                                 TextAlignment="Justify" VerticalScrollBarVisibility="Auto">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="KeyUp">
                    <i:InvokeCommandAction CommandParameter="{Binding ElementName=TextRiskDetail, Path=Text}" Command="{Binding TextRiskDetail_LostFocusCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </TextBox>
        <TextBox md:HintAssist.Hint="{Binding TheCurrentLayout.Line_Selected.IsCM, Converter={StaticResource BoolToCMConverter}, UpdateSourceTrigger=PropertyChanged}" IsReadOnly="True" DataContext="{Binding ElementName=thisComponent, Path=DataContext}" 
                                                 x:Name="TextProbability" Text="{Binding Path = Probability, Converter={x:Static decimalconv:DecimalUIConverter.Instance},
                                                                         ConverterParameter={x:Static decimalconv:DecimalUIConverter.ConverterParams},
                                                                        ConverterCulture={x:Static decimalconv:DecimalUIConverter.CultureInfo}, UpdateSourceTrigger=PropertyChanged}" Margin="10" 
                                                 md:HintAssist.IsFloating="True" HorizontalAlignment="Left" Width="150" Height="42"/>
        <md:Card Background="{DynamicResource MaterialDesignBackground}">
            <StackPanel>
                <Expander HorizontalAlignment="Stretch" Header="Damage Values" IsExpanded="True">
                    <StackPanel Orientation="Vertical" TextBlock.Foreground="{DynamicResource MaterialDesignBody}" Margin="24,8,24,16">
                        <Grid Background="#FFE5E5E5">
                            <DataGrid TabIndex="4" x:Name="DgRiskDamages" ItemsSource="{Binding DvRiskDamages}" Margin="1,1,0,0" 
                                                                      ColumnHeaderStyle="{StaticResource CustomColumnHeader}" AutoGenerateColumns="False" 
                                                                      CanUserDeleteRows="False" CanUserAddRows="False"
                                                                      VerticalGridLinesBrush="#FFDEDEDE" GridLinesVisibility="All">
                                <DataGrid.Columns>
                                    <DataGridTextColumn x:Name="WBSn" Header="WBS/User" Binding="{Binding {x:Static data:DT_WBS_RISK_DAMAGE.WBS_USER}}" Width="*" IsReadOnly="True"/>
                                    <DataGridTextColumn x:Name="TopRisk" Header="Damage" Binding="{Binding {x:Static data:DT_WBS_RISK_DAMAGE.DAMAGE}}" Width="200" IsReadOnly="True"/>
                                    <DataGridTemplateColumn  x:Name="TopValue" Header="Value" Width="100" IsReadOnly="False">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBox IsInactiveSelectionHighlightEnabled="True" VerticalAlignment="Center" x:Name="textDamage" Style="{StaticResource errorStyle}">
                                                    <i:Interaction.Triggers>
                                                        <i:EventTrigger EventName="LostFocus">
                                                            <i:InvokeCommandAction Command="{Binding DamageValueLostFocusCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"/>
                                                        </i:EventTrigger>
                                                        <i:EventTrigger EventName="GotFocus">
                                                            <i:InvokeCommandAction CommandParameter="{Binding ElementName=textDamage}" Command="{Binding DamageValueGotFocusCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"/>
                                                        </i:EventTrigger>
                                                    </i:Interaction.Triggers>
                                                    <TextBox.Text>
                                                        <Binding Path="value" UpdateSourceTrigger="PropertyChanged" 
                                                                        Converter="{x:Static decimalconv:DecimalUIConverter.Instance}" 
                                                                        ConverterParameter="{x:Static decimalconv:DecimalUIConverter.ConverterParams}" 
                                                                        ConverterCulture="{x:Static decimalconv:DecimalUIConverter.CultureInfo}">
                                                            <Binding.ValidationRules>
                                                                <local:DamageValueValidation ValidationStep="UpdatedValue"/>
                                                            </Binding.ValidationRules>
                                                        </Binding>
                                                    </TextBox.Text>
                                                </TextBox>
                                                <DataTemplate.Triggers>
                                                    <!--  Set the TextBox.Text Binding but this time leave the StringFormat off -->
                                                    <DataTrigger Binding="{Binding Path=IsKeyboardFocusWithin, ElementName=textDamage}" Value="True">
                                                        <Setter TargetName="textDamage" Property="Text" Value="{Binding Path=value, UpdateSourceTrigger=PropertyChanged}" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding Path=IsFocused, ElementName=TheTextBox}" Value="True">
                                                        <Setter TargetName="textDamage" Property="Text" Value="{Binding Path=value, UpdateSourceTrigger=PropertyChanged}" />
                                                    </DataTrigger>
                                                </DataTemplate.Triggers>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                </DataGrid.Columns>
                            </DataGrid>
                        </Grid>
                    </StackPanel>
                </Expander>
                <Border Background="{DynamicResource MaterialDesignDivider}" Height="5" HorizontalAlignment="Stretch" SnapsToDevicePixels="True" />
                <Expander HorizontalAlignment="Stretch" Header="WBS-Probability" IsExpanded="True">
                    <StackPanel Orientation="Vertical" TextBlock.Foreground="{DynamicResource MaterialDesignBody}" Margin="24,8,24,16">
                        <Grid Background="#FFE5E5E5">
                            <DataGrid x:Name="DgRiskWBS" ItemsSource="{Binding DvRiskWBS}" Margin="1,1,0,0"
                                                                      ColumnHeaderStyle="{StaticResource CustomColumnHeader}" 
                                                                      AutoGenerateColumns="False" CanUserAddRows="False" 
                                                                      CanUserDeleteRows="False" VerticalGridLinesBrush="#FFDEDEDE" GridLinesVisibility="All">
                                <DataGrid.Columns>
                                    <DataGridTemplateColumn x:Name="wbsBtn">
                                        <DataGridTemplateColumn.Header>
                                            <Button Command="{Binding AddWBSRiskCommand}" x:Name="BtnAddWBSRisk" DataContext="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Width="40" Height="40" ToolTip="Add WBS" Style="{StaticResource MaterialDesignFloatingActionDarkButton}" IsEnabled="{Binding Path = HasAccess}" VerticalAlignment="Top" 
                                                     md:ShadowAssist.ShadowDepth="Depth5">
                                                <md:PackIcon Kind="Plus"/>
                                            </Button>
                                        </DataGridTemplateColumn.Header>
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <Button x:Name="BtnDelWBSRisk" Height="20" Width="20" ToolTip="Delete row" Style="{StaticResource MaterialDesignFloatingActionMiniAccentButton}" IsEnabled="{Binding {x:Static data:DT_RISK_WBS.CanDelete}}" 
                                                        Command="{Binding DeleteWBSRiskCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
                                                        CommandParameter="{Binding Path=SelectedIndex, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" md:ShadowAssist.ShadowDepth="Depth5">
                                                    <md:PackIcon Kind="Trash"/>
                                                </Button>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                    <DataGridTextColumn x:Name="Level" Header="Level" Binding="{Binding {x:Static data:DT_RISK_WBS.NIVEL}}" Width="100" IsReadOnly="True">
                                    </DataGridTextColumn>
                                    <DataGridTextColumn x:Name="WBS" Header="WBS/User" Binding="{Binding {x:Static data:DT_RISK_WBS.WBS_USER}}" Width="*" IsReadOnly="True"/>
                                    <DataGridTemplateColumn x:Name="WBProbability" Width="100"  >
                                        <DataGridTemplateColumn.Header>
                                            <TextBlock x:Name="headerProb" Text="{Binding TheCurrentLayout.Line_Selected.IsCM, Converter={StaticResource BoolToCMShortConverter}, UpdateSourceTrigger=PropertyChanged}"/>
                                        </DataGridTemplateColumn.Header>
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBox VerticalAlignment="Center" x:Name="probabilityText" IsEnabled="{Binding {x:Static data:DT_RISK_WBS.IsProbabReadOnly}, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource errorStyle}">
                                                    <i:Interaction.Triggers>
                                                        <i:EventTrigger EventName="LostFocus">
                                                            <i:InvokeCommandAction Command="{Binding ProbabilityLostFocusCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"/>
                                                        </i:EventTrigger>
                                                    </i:Interaction.Triggers>
                                                    <TextBox.Text>
                                                        <Binding Path="probability" UpdateSourceTrigger="PropertyChanged"
                                                                        Converter="{x:Static decimalconv:DecimalUIConverter.Instance}" 
                                                                        ConverterParameter="{x:Static decimalconv:DecimalUIConverter.ConverterParams}" 
                                                                        ConverterCulture="{x:Static decimalconv:DecimalUIConverter.CultureInfo}">
                                                            <Binding.ValidationRules>
                                                                <local:ProbabilityValidation ValidationStep="UpdatedValue"/>
                                                            </Binding.ValidationRules>
                                                        </Binding>
                                                    </TextBox.Text>
                                                </TextBox>
                                                <DataTemplate.Triggers>
                                                      <!--Set the TextBox.Text Binding but this time leave the StringFormat off--> 
                                                    <DataTrigger Binding="{Binding Path=IsKeyboardFocusWithin, ElementName=probabilityText}" Value="True">
                                                        <Setter TargetName="probabilityText" Property="Text">
                                                            <Setter.Value>
                                                                <Binding Path="probability" UpdateSourceTrigger="PropertyChanged">
                                                                    <Binding.ValidationRules>
                                                                        <local:ProbabilityValidation ValidationStep="UpdatedValue"/>
                                                                    </Binding.ValidationRules>
                                                                </Binding>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding Path=IsFocused, ElementName=TheTextBox}" Value="True">
                                                        <Setter TargetName="probabilityText" Property="Text" >
                                                            <Setter.Value>
                                                                <Binding Path="probability" UpdateSourceTrigger="PropertyChanged">
                                                                    <Binding.ValidationRules>
                                                                        <local:ProbabilityValidation ValidationStep="UpdatedValue"/>
                                                                    </Binding.ValidationRules>
                                                                </Binding>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </DataTrigger>
                                                </DataTemplate.Triggers>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                    <DataGridTemplateColumn x:Name="riskPRIMARY" Header="Primary">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <StackPanel Orientation="Vertical">
                                                    <Button IsEnabled="{Binding {x:Static data:DT_RISK_WBS.CanEditPrimary}}" Width="25" Height="25"
                                                            Command="{Binding ChangePrimaryWBSRiskCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
                                                            CommandParameter="{Binding Path=SelectedIndex, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Style="{StaticResource MaterialDesignToolButton}" Content="{md:PackIcon Kind=CheckboxBlankCircleOutline}" Visibility="{Binding {x:Static data:DT_RISK_WBS.IS_PRIMARY}, Converter={StaticResource OpositeBoolToVisConverter}, UpdateSourceTrigger=PropertyChanged}" />
                                                    <Button Width="20" Height="20" Style="{StaticResource MaterialDesignFloatingActionMiniAccentButton}" Content="{md:PackIcon Kind=Key}" Visibility="{Binding {x:Static data:DT_RISK_WBS.IS_PRIMARY}, Converter={StaticResource BoolToVisConverter}, UpdateSourceTrigger=PropertyChanged}" />
                                                </StackPanel>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                </DataGrid.Columns>
                            </DataGrid>
                        </Grid>
                    </StackPanel>
                </Expander>
                <Border Background="{DynamicResource MaterialDesignDivider}" Height="5" HorizontalAlignment="Stretch" SnapsToDevicePixels="True" />
                <Expander HorizontalAlignment="Stretch" Header="Roles" IsExpanded="True">
                    <StackPanel Orientation="Vertical" TextBlock.Foreground="{DynamicResource MaterialDesignBody}" Margin="24,8,24,16">
                        <Grid Background="#FFE5E5E5">
                            <DataGrid TabIndex="5" Name="DgRiskRoles" ItemsSource="{Binding DvRoleRisk}" Margin="1,1,0,0" 
                                                                      ColumnHeaderStyle="{StaticResource CustomColumnHeader}"  
                                                                      AutoGenerateColumns="False" IsReadOnly="True" CanUserAddRows="False" 
                                                                      CanUserDeleteRows="False" VerticalGridLinesBrush="#FFDEDEDE" GridLinesVisibility="All">
                                <DataGrid.Columns>
                                    <DataGridTemplateColumn x:Name="roleBtn">
                                        <DataGridTemplateColumn.Header>
                                            <Button x:Name="BtnAddRiskRole" Width="40" Height="40" Style="{StaticResource MaterialDesignFloatingActionDarkButton}" ToolTip="Add Role"  HorizontalAlignment="Left"  VerticalAlignment="Center" 
                                                    md:ShadowAssist.ShadowDepth="Depth5">
                                                <i:Interaction.Triggers>
                                                    <i:EventTrigger EventName="Click">
                                                        <i:InvokeCommandAction Command="{Binding AddTabRiskRoleCommand}"/>
                                                    </i:EventTrigger>
                                                </i:Interaction.Triggers>
                                                <md:PackIcon Kind="Plus"/>
                                            </Button>
                                        </DataGridTemplateColumn.Header>
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <Button x:Name="BtnDelRiskRole" ToolTip="Delete Row" Height="20" Width="20"  HorizontalAlignment="Left" Style="{StaticResource MaterialDesignFloatingActionMiniAccentButton}" VerticalAlignment="Top" 
                                                        Command="{Binding DeleteTabRoleRiskCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
                                                        CommandParameter="{Binding Path=SelectedIndex, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" md:ShadowAssist.ShadowDepth="Depth5">
                                                    <md:PackIcon Kind="Trash"/>
                                                </Button>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                    <DataGridTextColumn x:Name="Role" Header="Role" Binding="{Binding {x:Static data:DT_Role_Risk.Role}}" Width="*"/>
                                </DataGrid.Columns>
                            </DataGrid>
                        </Grid>
                    </StackPanel>
                </Expander>
            </StackPanel>
        </md:Card>
    </StackPanel>

</ScrollViewer>
