<Window
        xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes"        
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:EnsureRisk"
        xmlns:xcad="http://schemas.xceed.com/wpf/xaml/avalondock"
        xmlns:classess="clr-namespace:EnsureRisk.Classess"
        xmlns:system="clr-namespace:System;assembly=mscorlib"
        Background="{DynamicResource MaterialDesignPaper}"
        TextElement.Foreground="{DynamicResource MaterialDesignBody}"
        TextElement.FontWeight="Medium"
        TextElement.FontSize="14"
        FontFamily="pack://application:,,,/MaterialDesignThemes.Wpf;component/Resources/Roboto/#Roboto"
        x:Class="EnsureRisk.MainWindow"           
        mc:Ignorable="d"
        Title="Ensure Risk" Height="715.725" Width="1385" WindowStartupLocation="CenterScreen" WindowState="Maximized" 
        Loaded="Window_Loaded" PreviewKeyDown="Window_PreviewKeyDown"  MouseMove="Window_MouseMove" Closing="Window_Closing">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.PopupBox.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <BooleanToVisibilityConverter x:Key="BoolToVisConverter" />
            <ContextMenu x:Key="MenuRisk" Visibility="Hidden" Background="Transparent">
                <MenuItem Height="35" x:Name="MenuAddRisk">
                    <MenuItem.Header>
                        <md:PopupBox Style="{StaticResource MaterialDesignMultiFloatingActionDarkPopupBox}" PlacementMode="RightAndAlignMiddles" HorizontalAlignment="Right" VerticalAlignment="Bottom" UnfurlOrientation="Horizontal" Width="32" Height="32">
                            <StackPanel Orientation="Horizontal">
                                <Button Style="{DynamicResource MaterialDesignFloatingActionDarkButton}" x:Name="AddButton" ToolTip="Add Risk" Click="MenuAddRisk_Click" Content="{md:PackIcon Kind=Plus}" Width="32" Height="32"/>
                                <Button Style="{DynamicResource MaterialDesignFloatingActionDarkButton}" x:Name="EditButton" ToolTip="Edit Risk" Click="MenuEditRisk_Click" Content="{md:PackIcon Kind=Pencil}" Width="32" Height="32"/>
                                <Button Style="{DynamicResource MaterialDesignFloatingActionDarkButton}" x:Name="DeleteButton" ToolTip="Delete Risk" Click="MenuDeleteRisk_Click" Content="{md:PackIcon Kind=Delete}" Width="32" Height="32"/>
                                <Button Style="{DynamicResource MaterialDesignFloatingActionDarkButton}" x:Name="MoveButton" ToolTip="Move Risk" Click="MenuMoveRisk_Click" Content="{md:PackIcon Kind=ArrowAll}" Width="32" Height="32"/>
                            </StackPanel>
                        </md:PopupBox>
                    </MenuItem.Header>
                </MenuItem>               
                <MenuItem Height="35" x:Name="MenuCM">
                    <MenuItem.Header>
                        <Button Style="{DynamicResource MaterialDesignFloatingActionDarkButton}" x:Name="ButtonCM" Click="MenuCM_Click" Content="{md:PackIcon Kind=Minus}" Width="32" Height="32"/>
                    </MenuItem.Header>
                </MenuItem>

                <MenuItem Height="35" x:Name="MenuZoom">
                    <MenuItem.Header>
                        <Button Style="{DynamicResource MaterialDesignFloatingActionDarkButton}" x:Name="ButtomZoom" Click="Scope_Click" Content="{md:PackIcon Kind=Loupe}" Width="32" Height="32"/>
                    </MenuItem.Header>
                </MenuItem>

                <MenuItem Height="35" x:Name="MenuCopy">
                    <MenuItem.Header>
                        <Button Style="{DynamicResource MaterialDesignFloatingActionDarkButton}" x:Name="ButtonCopy" Click="ButtonCopy_Click" Content="{md:PackIcon Kind=ContentCopy}" Width="32" Height="32"/>
                    </MenuItem.Header>
                </MenuItem>
                <MenuItem Height="35" x:Name="MenuPaste">
                    <MenuItem.Header>
                        <Button Style="{DynamicResource MaterialDesignFloatingActionDarkButton}" x:Name="ButtonPaste" Click="ButtonPaste_Click" Content="{md:PackIcon Kind=ContentPaste}" Width="32" Height="32"/>
                    </MenuItem.Header>
                </MenuItem>
                <MenuItem Height="35" x:Name="MenuImportProject">
                    <MenuItem.Header>
                        <Button Style="{DynamicResource MaterialDesignFloatingActionDarkButton}" x:Name="ButtonImportProject" Click="ButtonImportProject_Click" Content="{md:PackIcon Kind=Import}" Width="32" Height="32"/>
                    </MenuItem.Header>
                </MenuItem>
                <MenuItem Height="35" x:Name="MenuEnableRisk">
                    <MenuItem.Header>
                        <Button Style="{DynamicResource MaterialDesignFloatingActionDarkButton}" x:Name="EnableRiskButton" Click="EnableRiskButton_Click" Content="{md:PackIcon Kind=ToggleSwitch}" Width="32" Height="32"/>
                    </MenuItem.Header>
                </MenuItem>
            </ContextMenu>
            <ContextMenu x:Key="MenuRiskLimited" Visibility="Visible" Background="Transparent">
                <MenuItem Height="35" x:Name="MenuEditRiskLimited">
                    <MenuItem.Header>
                        <Button Style="{DynamicResource MaterialDesignFloatingActionDarkButton}" x:Name="EditButtonLimited" Click="MenuEditRisk_Click" Content="{md:PackIcon Kind=Pencil}" Width="32" Height="32"/>
                    </MenuItem.Header>
                </MenuItem>
                <MenuItem Height="35" x:Name="MenuZoomLimited">
                    <MenuItem.Header>
                        <Button Style="{DynamicResource MaterialDesignFloatingActionDarkButton}" x:Name="ButtomZoomLimited" Click="Scope_Click" Content="{md:PackIcon Kind=Loupe}" Width="32" Height="32"/>
                    </MenuItem.Header>
                </MenuItem>

                <MenuItem Height="35" x:Name="MenuCopyLimited">
                    <MenuItem.Header>
                        <Button Style="{DynamicResource MaterialDesignFloatingActionDarkButton}" x:Name="ButtonCopyLimited" Click="ButtonCopy_Click" Content="{md:PackIcon Kind=ContentCopy}" Width="32" Height="32"/>
                    </MenuItem.Header>
                </MenuItem>
                <MenuItem Height="35" x:Name="MenuEnableRiskLimited">
                    <MenuItem.Header>
                        <Button Style="{DynamicResource MaterialDesignFloatingActionDarkButton}" x:Name="EnableRiskButtonLimited" Click="EnableRiskButton_Click" Content="{md:PackIcon Kind=ToggleSwitch}" Width="32" Height="32"/>
                    </MenuItem.Header>
                </MenuItem>
            </ContextMenu>
            <ContextMenu x:Key="MenuMainRisk" Visibility="Hidden" Background="Transparent">
                <MenuItem Height="35" x:Name="MenuMainAddRisk">
                    <MenuItem.Header>
                        <Button Style="{DynamicResource MaterialDesignFloatingActionDarkButton}" x:Name="AddMainButton" Click="MenuAddRisk_Click" Content="{md:PackIcon Kind=Plus}" Width="32" Height="32"/>
                    </MenuItem.Header>
                </MenuItem>
                <MenuItem Height="35" x:Name="MenuMainPaste">
                    <MenuItem.Header>
                        <Button Style="{DynamicResource MaterialDesignFloatingActionDarkButton}" x:Name="ButtonMainPaste" Click="ButtonPaste_Click" Content="{md:PackIcon Kind=ContentPaste}" Width="32" Height="32"/>
                    </MenuItem.Header>
                </MenuItem>
                <MenuItem Height="35" x:Name="MenuMainImportProject">
                    <MenuItem.Header>
                        <Button Style="{DynamicResource MaterialDesignFloatingActionDarkButton}" x:Name="ButtonMainImportProject" Click="ButtonImportProject_Click" Content="{md:PackIcon Kind=Import}" Width="32" Height="32"/>
                    </MenuItem.Header>
                </MenuItem>
            </ContextMenu>
            <ContextMenu x:Key="MenuCM" Visibility="Hidden" Background="Transparent">
                <MenuItem Height="35" x:Name="MenuEditCM">
                    <MenuItem.Header>
                        <Button Style="{DynamicResource MaterialDesignFloatingActionDarkButton}" x:Name="EditCMButton" Click="MenuEditCM_Click" Content="{md:PackIcon Kind=Pencil}" Width="32" Height="32"/>
                    </MenuItem.Header>
                </MenuItem>
                <MenuItem Height="35" x:Name="MenuDeleteCM">
                    <MenuItem.Header>
                        <Button Style="{DynamicResource MaterialDesignFloatingActionDarkButton}" x:Name="DeleteCMButton" Click="MenuDeleteCM_Click" Content="{md:PackIcon Kind=Delete}" Width="32" Height="32"/>
                    </MenuItem.Header>
                </MenuItem>
                <MenuItem Height="35" x:Name="MenuMoveCM">
                    <MenuItem.Header>
                        <Button Style="{DynamicResource MaterialDesignFloatingActionDarkButton}" x:Name="MoveCMButton" Click="MenuMoveCM_Click" Content="{md:PackIcon Kind=ArrowAll}" Width="32" Height="32"/>
                    </MenuItem.Header>
                </MenuItem>
                <MenuItem Height="35" x:Name="MenuEnableCM">
                    <MenuItem.Header>
                        <Button Style="{DynamicResource MaterialDesignFloatingActionDarkButton}" x:Name="EnableCMButton" Click="MenuEnableCM_Click" Content="{md:PackIcon Kind=ToggleSwitch}" Width="32" Height="32"/>
                    </MenuItem.Header>
                </MenuItem>
            </ContextMenu>
            <ContextMenu x:Key="MenuGroupRisk" Visibility="Hidden" Background="Transparent">
                <MenuItem Height="35" x:Name="MenuActDesGroupRisk">
                    <MenuItem.Header>
                        <Button Style="{DynamicResource MaterialDesignFloatingActionDarkButton}" x:Name="ActDesGroupRiskButton" Click="ActDesGroupRiskButton_Click" Content="{md:PackIcon Kind=ToggleSwitch}" Width="32" Height="32"/>
                    </MenuItem.Header>
                </MenuItem>
                <MenuItem Height="35" x:Name="MenuAddCMGroupRisk">
                    <MenuItem.Header>
                        <Button Style="{DynamicResource MaterialDesignFloatingActionDarkButton}" x:Name="AddCMGroupRiskButton" Click="AddCMGroupRiskButton_Click" Content="{md:PackIcon Kind=Minus}" Width="32" Height="32" ToolTip="Add Countermeasure"/>
                    </MenuItem.Header>
                </MenuItem>
                <MenuItem Height="35" x:Name="MenuGroupingGroupRisk">
                    <MenuItem.Header>
                        <Button Style="{DynamicResource MaterialDesignFloatingActionDarkButton}" x:Name="GroupingGroupRiskButton" Click="GroupingGroupRiskButton_Click" Content="{md:PackIcon Kind=Group}" Width="32" Height="32" ToolTip="Group"/>
                    </MenuItem.Header>
                </MenuItem>
            </ContextMenu>
            <ContextMenu x:Key="MenuGroupCM" Visibility="Hidden" Background="Transparent">
                <MenuItem Height="35" x:Name="MenuActDesGroupCM">
                    <MenuItem.Header>
                        <Button Style="{DynamicResource MaterialDesignFloatingActionDarkButton}" x:Name="ActDesGroupCMButton" Click="ActDesGroupCMButton_Click" Content="{md:PackIcon Kind=ToggleSwitch}" Width="32" Height="32"/>
                    </MenuItem.Header>
                </MenuItem>
                <MenuItem Height="35" x:Name="MenuDelCMGroupCM">
                    <MenuItem.Header>
                        <Button Style="{DynamicResource MaterialDesignFloatingActionDarkButton}" x:Name="DelCMGroupCMButton" Click="DelCMGroupCMButton_Click" Content="{md:PackIcon Kind=Delete}" Width="32" Height="32" ToolTip="Delete"/>
                    </MenuItem.Header>
                </MenuItem>
                <MenuItem Height="35" x:Name="MenuGroupingGroupCM">
                    <MenuItem.Header>
                        <Button Style="{DynamicResource MaterialDesignFloatingActionDarkButton}" x:Name="GroupingGroupCMButton" Click="GroupingGroupCMButton_Click" Content="{md:PackIcon Kind=Group}" Width="32" Height="32" ToolTip="Group"/>
                    </MenuItem.Header>
                </MenuItem>
            </ContextMenu>
            <ContextMenu x:Key="MenuGroupMixed" Visibility="Hidden" Background="Transparent">
                <MenuItem Height="35" x:Name="MenuActDesGroupMixed">
                    <MenuItem.Header>
                        <Button Style="{DynamicResource MaterialDesignFloatingActionDarkButton}" x:Name="ActDesGroupMixedButton" Click="ActDesGroupMixedButton_Click" Content="{md:PackIcon Kind=ToggleSwitch}" Width="32" Height="32"/>
                    </MenuItem.Header>
                </MenuItem>
                <MenuItem Height="35" x:Name="MenuGroupingGroupMixed">
                    <MenuItem.Header>
                        <Button Style="{DynamicResource MaterialDesignFloatingActionDarkButton}" x:Name="GroupingGroupMixedButton" Click="GroupingGroupMixedButton_Click" Content="{md:PackIcon Kind=Group}" Width="32" Height="32" ToolTip="Group"/>
                    </MenuItem.Header>
                </MenuItem>
            </ContextMenu>
            <md:PackIcon Kind="ChevronDoubleLeft" x:Key="Left"/>
            <md:PackIcon Kind="Delete" x:Key="BtnDelete"/>
            <md:PackIcon Kind="RenameBox" x:Key="ChangeName"/>
            <Style x:Key="Estilo" />
            <md:PackIcon Kind="ChevronDoubleRight" x:Key="Right"/>
            <md:PackIcon Kind="Lan" x:Key="Tree"/>
            <md:PackIcon Kind="Fish" x:Key="Fish"/>
            <Button Style="{DynamicResource MaterialDesignToolForegroundButton}" x:Key="DeleteRow" Content="{md:PackIcon Kind=Delete}" ToolTip="Remove this group"/>
            <!--<TextBox Style="{StaticResource MaterialDesignFilledTextFieldTextBox}" x:Key="TextName"/>-->
            <Slider x:Key="CommonSlider"/>
            <ComboBox x:Key="CommonCB"/>
            <Button Style="{DynamicResource MaterialDesignToolForegroundButton}" x:Key="Delete" Content="{md:PackIcon Kind=Delete}" ToolTip="Remove this group"/>
            <ToggleButton x:Key="togleStyle" Style="{StaticResource MaterialDesignActionToggleButton}" Content="{md:PackIcon Kind=Close}"/>
        </ResourceDictionary>
    </Window.Resources>
    <Window.CommandBindings>
        <CommandBinding Command="local:CustomCommands.Login" Executed="LoginCommandBinding_Executed" />
        <CommandBinding Command="local:CustomCommands.Project" Executed="ProjectCommandBinding_Executed" />
        <CommandBinding Command="local:CustomCommands.User" Executed="UserCommandBinding_Executed" />
        <CommandBinding Command="local:CustomCommands.Role" Executed="RoleCommandBinding_Executed" />
        <CommandBinding Command="local:CustomCommands.Damage" Executed="DamageCommandBinding_Executed" />
        <CommandBinding Command="local:CustomCommands.Default" Executed="DefaultCommandBinding_Executed" />
        <CommandBinding Command="local:CustomCommands.Settings" Executed="OptionCommandBinding_Executed" />
        <CommandBinding Command="local:CustomCommands.Risk" Executed="RiskCommandBinding_Executed" />
        <CommandBinding Command="local:CustomCommands.CounterMeasure" Executed="CounterMeasureCommandBinding_Executed" />
        <CommandBinding Command="local:CustomCommands.WBS" Executed="WBS_CommandBinding_Executed" />
        <CommandBinding Command="local:CustomCommands.Properties" Executed="Properties_CommandBinding_Executed" />
        <CommandBinding Command="local:CustomCommands.Export" Executed="ExportCommandBinding_Executed"/>
        <CommandBinding Command="SaveAs" Executed="SaveAsCommandBinding_Executed"/>
        <CommandBinding Command="Save" Executed="SaveCommandBinding_Executed" />
        <CommandBinding Command="Print" Executed="PrintCommandBinding_Executed" />
    </Window.CommandBindings>
    <Window.InputBindings>
        <KeyBinding Key="L" Modifiers="Control" Command="local:CustomCommands.Login"/>
        <KeyBinding Key="W" Modifiers="Control" Command="local:CustomCommands.WBS"/>
        <KeyBinding Key="J" Modifiers="Control" Command="local:CustomCommands.Project"/>
        <KeyBinding Key="U" Modifiers="Control" Command="local:CustomCommands.User"/>
        <KeyBinding Key="R" Modifiers="Control+Shift" Command="local:CustomCommands.Role"/>
        <KeyBinding Key="D" Modifiers="Control" Command="local:CustomCommands.Damage"/>
        <KeyBinding Key="T" Modifiers="Control" Command="local:CustomCommands.Default"/>
        <KeyBinding Key="O" Modifiers="Control" Command="local:CustomCommands.Settings"/>
        <KeyBinding Key="R" Modifiers="Control" Command="local:CustomCommands.Risk"/>
        <KeyBinding Key="M" Modifiers="Control" Command="local:CustomCommands.CounterMeasure"/>
        <KeyBinding Key="P" Modifiers="Control+Shift" Command="local:CustomCommands.Properties"/>
        <KeyBinding Key="E" Modifiers="Control" Command="local:CustomCommands.Export"/>
        <KeyBinding Key="S" Modifiers="Control+Shift" Command="SaveAs"/>
        <KeyBinding Key="S" Modifiers="Control" Command="Save"/>
        <KeyBinding Key="P" Modifiers="Control" Command="Print"/>
    </Window.InputBindings>
    <Grid x:Name="Supergrid">        
        <Grid.RowDefinitions>
            <RowDefinition Height="50"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="5"/>
        </Grid.RowDefinitions>
        <xcad:DockingManager x:Name="_dockingManager" AllowMixedOrientation="True" BorderBrush="Black" BorderThickness="1" Theme="{Binding ElementName=_themeCombo, Path=SelectedItem.Tag}" Grid.Row="1" Margin="0">
            <xcad:DockingManager.DocumentHeaderTemplate>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <md:PackIcon Kind="FileDocument"  Margin="0,0,4,0"/>
                        <TextBlock Text="{Binding Title}" Name="headerDrawPanel"/>
                    </StackPanel>
                </DataTemplate>
            </xcad:DockingManager.DocumentHeaderTemplate>
            <xcad:LayoutRoot x:Name="_layoutRoot">
                <xcad:LayoutPanel Orientation="Horizontal">
                    <xcad:LayoutAnchorablePane DockWidth="200" FloatingWidth="200" >
                        <xcad:LayoutAnchorable ContentId="properties" x:Name="LayoutProperties"  Title="Properties"  CanHide="true" CanClose="False" AutoHideWidth="240">
                            <ScrollViewer VerticalScrollBarVisibility="Auto" >
                                <StackPanel Orientation="Vertical">
                                    <WrapPanel x:Name="WrapRisk" Visibility="{Binding Path = ShowRiskData, Converter={StaticResource BoolToVisConverter} }">
                                        <StackPanel Orientation="Vertical" >
                                            <TextBox TabIndex="1" IsEnabled="{Binding Path = HasAccess}" Width="200" KeyUp="RiskName_KeyUp" md:HintAssist.Hint="Risk Name" md:HintAssist.IsFloating="True" x:Name="TextRisk" MaxLength="250"  TextWrapping="Wrap"  VerticalAlignment="Top" LostFocus="TextRisk_LostFocus" MaxLines="1" TextOptions.TextHintingMode="Animated" TextChanged="RiskName_TextChanged">
                                                <TextBox.Text>
                                                    <Binding Path="RiskLineName" UpdateSourceTrigger="PropertyChanged">
                                                        <Binding.ValidationRules>
                                                            <classes:NotEmptyValidationRule ValidatesOnTargetUpdated="True" xmlns:classes="clr-namespace:EnsureRisk.Classess"/>
                                                        </Binding.ValidationRules>
                                                    </Binding>
                                                </TextBox.Text>
                                            </TextBox>
                                            <Border Width="200" Height="60" BorderBrush="Black"  BorderThickness="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                                <ScrollViewer VerticalScrollBarVisibility="Auto">
                                                    <StackPanel Name="RiskresultStack"></StackPanel>
                                                </ScrollViewer>
                                            </Border>
                                        </StackPanel>

                                        <TextBox Margin="10" Style="{StaticResource MaterialDesignOutlinedTextFieldTextBox}" HorizontalAlignment="Stretch" IsEnabled="{Binding Path = HasAccess}" md:HintAssist.Hint="Comments" md:HintAssist.IsFloating="True" x:Name="TextRiskDetail" TextWrapping="Wrap" TextAlignment="Justify" VerticalScrollBarVisibility="Auto" LostFocus="TextRiskDetail_LostFocus"/>
                                        <TextBox md:HintAssist.Hint="Probability(%)" x:Name="TextProbability" Text="{Binding Path = Probability}" Margin="10" md:HintAssist.IsFloating="True" Width="150" IsEnabled="False" Height="42"/>
                                        <TabControl>
                                            <TabItem Header="Values" Name="tabValues" >
                                                <Grid Background="#FFE5E5E5">
                                                    <DataGrid TabIndex="4" x:Name="DgRiskDamages" Margin="1,1,0,0" AutoGenerateColumns="False" SelectedCellsChanged="DgRiskDamages_SelectedCellsChanged" CellEditEnding="DgRiskDamages_CellEditEnding" SelectionChanged="DgRiskDamages_SelectionChanged">
                                                        <DataGrid.Resources>
                                                            <Style x:Key="errorStyle" TargetType="{x:Type TextBox}">
                                                                <Setter Property="Padding" Value="-2"/>
                                                                <Style.Triggers>
                                                                    <Trigger Property="Validation.HasError" Value="True">
                                                                        <Setter Property="Background" Value="Red"/>
                                                                        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                                                                    </Trigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </DataGrid.Resources>
                                                        <DataGrid.Columns>
                                                            <DataGridTextColumn x:Name="WBSn" Header="WBS" Binding="{Binding Path= WBSName}" Width="*" IsReadOnly="True"/>
                                                            <DataGridTextColumn x:Name="TopRisk" Header="Damage" Binding="{Binding Path= Damage}" Width="*" IsReadOnly="True"/>
                                                            <DataGridTextColumn x:Name="TopValue" Header="Value" EditingElementStyle="{StaticResource errorStyle}" Width="*" IsReadOnly="False">
                                                                <DataGridTextColumn.Binding>
                                                                    <Binding Path="value" UpdateSourceTrigger="PropertyChanged">
                                                                        <Binding.ValidationRules>
                                                                            <classes:NegativeValidation ValidationStep="UpdatedValue" xmlns:classes="clr-namespace:EnsureRisk.Classess"/>
                                                                        </Binding.ValidationRules>
                                                                    </Binding>
                                                                </DataGridTextColumn.Binding>
                                                            </DataGridTextColumn>
                                                        </DataGrid.Columns>
                                                    </DataGrid>
                                                </Grid>
                                            </TabItem>
                                            <TabItem Header="WBS" Name="tabWBS" >
                                                <Grid Background="#FFE5E5E5" Name="gridRiskWBS">
                                                    <Button Name="BtnAddWBSRisk" Click="BtnAddWBSRisk_Click" IsEnabled="{Binding Path = HasAccess}" HorizontalAlignment="Left" Margin="15,14,0,0" VerticalAlignment="Top" Width="45" md:ShadowAssist.ShadowDepth="Depth5">
                                                        <md:PackIcon Kind="Plus"/>
                                                    </Button>
                                                    <Button x:Name="BtnDelWBSRisk" Click="BtnDelWBSRisk_Click" IsEnabled="{Binding Path = HasAccess}" HorizontalAlignment="Left" Margin="15,49,0,0" VerticalAlignment="Top" Width="45" md:ShadowAssist.ShadowDepth="Depth5">
                                                        <md:PackIcon Kind="Minus"/>
                                                    </Button>
                                                    <Button x:Name="BtnSetPrimary" Click="BtnSetPrimary_Click" IsEnabled="{Binding Path = HasAccess}" HorizontalAlignment="Left" Style="{DynamicResource MaterialDesignFloatingActionMiniAccentButton}" ToolTip="Set Primary WBS" Margin="15,89,0,0" VerticalAlignment="Top" md:ShadowAssist.ShadowDepth="Depth5" >
                                                        <md:PackIcon Kind="Key"/>
                                                    </Button>
                                                    <DataGrid Name="DgRiskWBS" CanUserDeleteRows="False" Margin="71,5,0,0" AutoGenerateColumns="False" SelectedCellsChanged="DgRiskWBS_SelectedCellsChanged" CellEditEnding="DgRiskWBS_CellEditEnding" SelectionChanged="DgRiskWBS_SelectionChanged">
                                                        <DataGrid.Resources>
                                                            <Style x:Key="errorStyle" TargetType="{x:Type TextBox}">
                                                                <Setter Property="Padding" Value="-2"/>
                                                                <Style.Triggers>
                                                                    <Trigger Property="Validation.HasError" Value="True">
                                                                        <Setter Property="Background" Value="Red"/>
                                                                        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                                                                    </Trigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </DataGrid.Resources>
                                                        <DataGrid.Columns>
                                                            <DataGridTextColumn x:Name="Level" Header="Level" Binding="{Binding Path= Nivel}" Width="100" IsReadOnly="True"/>
                                                            <DataGridTextColumn x:Name="WBS" Header="WBS Name" Binding="{Binding Path= WBS_Name}" Width="*" IsReadOnly="True"/>
                                                            <DataGridTextColumn x:Name="WBSUser" Header="User" Binding="{Binding Path= userName}" Width="*" IsReadOnly="True"/>
                                                            <DataGridTextColumn x:Name="WBProbability" Header="Prob (%)" Width="*"  EditingElementStyle="{StaticResource errorStyle}" IsReadOnly="false" >
                                                                <DataGridTextColumn.Binding>
                                                                    <Binding Path="probability" UpdateSourceTrigger="LostFocus">
                                                                        <Binding.ValidationRules>
                                                                            <classes:NegativePlusValidation ValidationStep="UpdatedValue" xmlns:classes="clr-namespace:EnsureRisk.Classess"/>
                                                                        </Binding.ValidationRules>
                                                                    </Binding>
                                                                </DataGridTextColumn.Binding>
                                                            </DataGridTextColumn>
                                                            <DataGridTextColumn x:Name="PRIMARY" Header="Primary" Binding="{Binding Path= Primaryy}" Width="100" Foreground="#FFF30808" FontWeight="Bold" IsReadOnly="True"/>
                                                        </DataGrid.Columns>
                                                    </DataGrid>
                                                </Grid>
                                            </TabItem>
                                            <TabItem Header="Roles" Name="tabRoles">
                                                <Grid Background="#FFE5E5E5" Name="gridTabRoles" IsEnabled="{Binding Path = HasAccess}">
                                                    <Button Name="BtnAddRiskRole" Click="BtnAddRiskRole_Click" HorizontalAlignment="Left" Margin="15,14,0,0" VerticalAlignment="Top" Width="47" md:ShadowAssist.ShadowDepth="Depth5">
                                                        <md:PackIcon Kind="Plus"/>
                                                    </Button>
                                                    <Button x:Name="BtnDelRiskRole" Click="BtnDelRiskRole_Click" HorizontalAlignment="Left" Margin="15,49,0,0" VerticalAlignment="Top" Width="47" md:ShadowAssist.ShadowDepth="Depth5">
                                                        <md:PackIcon Kind="Minus"/>
                                                    </Button>
                                                    <DataGrid TabIndex="5" Name="DgRiskRoles" Margin="71,5,0,0" AutoGenerateColumns="False" IsReadOnly="True" CanUserAddRows="False" CanUserDeleteRows="False">
                                                        <DataGrid.Columns>
                                                            <DataGridTextColumn x:Name="Role" Header="Role" Binding="{Binding Path= Role}" Width="*"/>
                                                        </DataGrid.Columns>
                                                    </DataGrid>
                                                </Grid>
                                            </TabItem>
                                        </TabControl>

                                    </WrapPanel>
                                    <WrapPanel x:Name="WrapCM" Visibility="{Binding Path = ShowCMData, Converter={StaticResource BoolToVisConverter} }" >
                                        <TextBox md:HintAssist.Hint="CounterMeasure" Height="42" x:Name="TextCM" Margin="10" md:HintAssist.IsFloating="True" Width="200" LostFocus="TextCM_LostFocus" TextChanged="TextCM_TextChanged">
                                            <TextBox.Text>
                                                <Binding Path="CMLineName" UpdateSourceTrigger="PropertyChanged">
                                                    <Binding.ValidationRules>
                                                        <classes:NotEmptyValidationRule ValidatesOnTargetUpdated="True" xmlns:classes="clr-namespace:EnsureRisk.Classess"/>
                                                    </Binding.ValidationRules>
                                                </Binding>
                                            </TextBox.Text>
                                        </TextBox>
                                        <TextBox Margin="10" Style="{StaticResource MaterialDesignOutlinedTextFieldTextBox}" IsEnabled="{Binding Path = HasAccess}" HorizontalAlignment="Stretch" md:HintAssist.Hint="Comments" md:HintAssist.IsFloating="True" x:Name="TextCMDetail" TextWrapping="Wrap" TextAlignment="Justify" VerticalScrollBarVisibility="Auto" LostFocus="TextCMDetail_LostFocus"/>
                                        <TextBox md:HintAssist.Hint="Risk Reduction(%)" Margin="10" x:Name="TextRReduction" md:HintAssist.IsFloating="True" Width="150" Text="{Binding Path = RiskReduction}" IsEnabled="False" Height="42"/>
                                        <TabControl >
                                            <TabItem Header="Values" Name="tabCMValues" >
                                                <Grid Background="#FFE5E5E5">
                                                    <DataGrid Name="dgCMDamages" Margin="1,1,0,0"  AutoGenerateColumns="False" SelectedCellsChanged="DgCMDamages_SelectedCellsChanged" CellEditEnding="DgCMDamages_CellEditEnding" SelectionChanged="DgCMDamages_SelectionChanged">
                                                        <DataGrid.Resources>
                                                            <Style x:Key="errorStyle" TargetType="{x:Type TextBox}">
                                                                <Setter Property="Padding" Value="-2"/>
                                                                <Style.Triggers>
                                                                    <Trigger Property="Validation.HasError" Value="True">
                                                                        <Setter Property="Background" Value="Red"/>
                                                                        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                                                                    </Trigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </DataGrid.Resources>
                                                        <DataGrid.Columns>
                                                            <DataGridTextColumn x:Name="WBSName" Header="WBS" Binding="{Binding Path= WBSName}" Width="*"/>
                                                            <DataGridTextColumn x:Name="DamageName" Header="Damage" Binding="{Binding Path= Damage}" Width="*"/>
                                                            <DataGridTextColumn x:Name="CMDamageValue" Header="Value" Width="*">
                                                                <DataGridTextColumn.Binding>
                                                                    <Binding Path="value" UpdateSourceTrigger="LostFocus">
                                                                        <Binding.ValidationRules>
                                                                            <classes:NegativeValidation ValidationStep="UpdatedValue" xmlns:classes="clr-namespace:EnsureRisk.Classess"/>
                                                                        </Binding.ValidationRules>
                                                                    </Binding>
                                                                </DataGridTextColumn.Binding>
                                                            </DataGridTextColumn>
                                                        </DataGrid.Columns>
                                                    </DataGrid>
                                                </Grid>
                                            </TabItem>
                                            <TabItem Header="WBS" Name="tabWBSCM" >
                                                <Grid Background="#FFE5E5E5" Name="gridTabWBSCM" >
                                                    <Button Name="BtnAddWBSCM" IsEnabled="{Binding Path = HasAccess}" Click="BtnAddWBSCM_Click" HorizontalAlignment="Left" Margin="15,14,0,0" VerticalAlignment="Top" Width="47"  md:ShadowAssist.ShadowDepth="Depth5">
                                                        <md:PackIcon Kind="Plus"/>
                                                    </Button>
                                                    <Button x:Name="BtnDelWBSCM" IsEnabled="{Binding Path = HasAccess}" Click="BtnDelWBSCM_Click" HorizontalAlignment="Left" Margin="15,49,0,0" VerticalAlignment="Top" Width="47"  md:ShadowAssist.ShadowDepth="Depth5">
                                                        <md:PackIcon Kind="Minus"/>
                                                    </Button>
                                                    <Button x:Name="BtnSetPrimaryCM" IsEnabled="{Binding Path = HasAccess}" Click="BtnSetPrimaryCM_Click" HorizontalAlignment="Left" Style="{DynamicResource MaterialDesignFloatingActionAccentButton}" ToolTip="Set Primary WBS" Margin="15,89,0,0" VerticalAlignment="Top" Width="47"  md:ShadowAssist.ShadowDepth="Depth5" Height="44">
                                                        <md:PackIcon Kind="Key"/>
                                                    </Button>
                                                    <DataGrid Name="dgWBSCM" CanUserDeleteRows="False" Margin="71,5,0,0" AutoGenerateColumns="False" SelectedCellsChanged="DgWBSCM_SelectedCellsChanged" CellEditEnding="DgWBSCM_CellEditEnding" SelectionChanged="DgWBSCM_SelectionChanged">
                                                        <DataGrid.Resources>
                                                            <Style x:Key="errorStyle" TargetType="{x:Type TextBox}">
                                                                <Setter Property="Padding" Value="-2"/>
                                                                <Style.Triggers>
                                                                    <Trigger Property="Validation.HasError" Value="True">
                                                                        <Setter Property="Background" Value="Red"/>
                                                                        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                                                                    </Trigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </DataGrid.Resources>
                                                        <DataGrid.Columns>
                                                            <DataGridTextColumn x:Name="LevelCM" Header="Level" Binding="{Binding Path= Nivel}" Width="100" IsReadOnly="True"/>
                                                            <DataGridTextColumn x:Name="WBSCM" Header="WBS Name" Binding="{Binding Path= WBS_Name}" Width="*" IsReadOnly="True"/>
                                                            <DataGridTextColumn x:Name="WBSUserCM" Header="User" Binding="{Binding Path= userName}" Width="*" IsReadOnly="True"/>
                                                            <DataGridTextColumn x:Name="WBSProbCM" Header="Risk Red.(%)" Width="100" IsReadOnly="False">
                                                                <DataGridTextColumn.Binding>
                                                                    <Binding Path="probability" UpdateSourceTrigger="LostFocus">
                                                                        <Binding.ValidationRules>
                                                                            <classes:NegativePlusValidation ValidationStep="UpdatedValue" xmlns:classes="clr-namespace:EnsureRisk.Classess"/>
                                                                        </Binding.ValidationRules>
                                                                    </Binding>
                                                                </DataGridTextColumn.Binding>
                                                            </DataGridTextColumn>
                                                            <DataGridTextColumn x:Name="PRIMARYCM" Header="Primary" Binding="{Binding Path= Primaryy}" Width="100" Foreground="#FFF30808" FontWeight="Bold" IsReadOnly="True"/>
                                                        </DataGrid.Columns>
                                                    </DataGrid>
                                                </Grid>
                                            </TabItem>
                                            <TabItem Header="Roles" Name="tabRolesCM" >
                                                <Grid Background="#FFE5E5E5" Name="gridTabRolesCM" IsEnabled="{Binding Path = HasAccess}">
                                                    <Button Name="BtnAddRoleCM"  HorizontalAlignment="Left" Click="BtnAddRoleCM_Click" Margin="15,14,0,0" VerticalAlignment="Top" Width="47" md:ShadowAssist.ShadowDepth="Depth5">
                                                        <md:PackIcon Kind="Plus"/>
                                                    </Button>
                                                    <Button x:Name="BtnDelRoleCM" HorizontalAlignment="Left" Click="BtnDelRoleCM_Click" Margin="15,49,0,0" VerticalAlignment="Top" Width="47" md:ShadowAssist.ShadowDepth="Depth5">
                                                        <md:PackIcon Kind="Minus"/>
                                                    </Button>
                                                    <DataGrid Name="dgRolesCM" Margin="71,5,0,0" AutoGenerateColumns="False" IsReadOnly="True" CanUserDeleteRows="False">
                                                        <DataGrid.Columns>
                                                            <DataGridTextColumn x:Name="RoleCM" Header="Role" Binding="{Binding Path= Role}" Width="*"/>
                                                        </DataGrid.Columns>
                                                    </DataGrid>
                                                </Grid>
                                            </TabItem>
                                        </TabControl>

                                    </WrapPanel>
                                </StackPanel>
                            </ScrollViewer>
                        </xcad:LayoutAnchorable>
                        <xcad:LayoutAnchorable x:Name="AnchorWBSList" Title="WBS" CanHide="True" IsVisibleChanged="AnchorWBSList_IsVisibleChanged" ScrollViewer.CanContentScroll="True" ToolTip="WBS List" AutoHideWidth="300" FloatingWidth="300">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="60"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Grid Grid.Row="0">
                                    <md:PopupBox ToolTip="More" Style="{StaticResource MaterialDesignMultiFloatingActionDarkPopupBox}" PlacementMode="RightAndAlignMiddles" HorizontalAlignment="Left" VerticalAlignment="Top" UnfurlOrientation="Horizontal" >
                                        <StackPanel Orientation="Horizontal">
                                            <Button Style="{DynamicResource MaterialDesignFloatingActionMiniLightButton}" x:Name="BtnAddWBS" Click="BtnAddWBS_Click" Content="{md:PackIcon Kind=Add}" Width="32" Height="32" ToolTip="Add WBS"/>
                                            <Button Style="{DynamicResource MaterialDesignFloatingActionMiniLightButton}" x:Name="BtnCollapseWBS" Click="BtnCollapse_Click" Content="{md:PackIcon Kind=ContentCopy}" Width="32" Height="32" ToolTip="Collapse All"/>
                                            <Button Style="{DynamicResource MaterialDesignFloatingActionMiniLightButton}" x:Name="BtnDeselect" Click="BtnDeselect_Click" Content="{md:PackIcon Kind=ArrowBack}" Width="32" Height="32" ToolTip="DeSelect"/>
                                            <Button Style="{DynamicResource MaterialDesignFloatingActionMiniLightButton}" x:Name="BtnSettings" Click="BtnDeselect_Click" Content="{md:PackIcon Kind=Settings}" Width="32" Height="32" ToolTip="WBS Settings"/>
                                        </StackPanel>
                                    </md:PopupBox>
                                </Grid>
                                <Grid Grid.Row="1">
                                    <TreeView Name="TreeViewWBS"/>
                                </Grid>
                            </Grid>
                        </xcad:LayoutAnchorable>
                        <xcad:LayoutAnchorable x:Name="AnchorMiniMap" Title="Mini Map" CanHide="True" ScrollViewer.CanContentScroll="True" ToolTip="Mini Map" AutoHideWidth="300" FloatingWidth="300">
                            <Grid Name="gridMiniMap" Background="#FF918080">
                                <classess:MiniMapControl x:Name="MiniMap" />
                            </Grid>
                        </xcad:LayoutAnchorable>
                    </xcad:LayoutAnchorablePane>
                    <xcad:LayoutDocumentPaneGroup>
                        <xcad:LayoutDocumentPane x:Name="LayoutDocumentPanel"/>
                    </xcad:LayoutDocumentPaneGroup >
                    <xcad:LayoutAnchorablePaneGroup DockWidth="250" ScrollViewer.CanContentScroll="True" DockMinWidth="50" FloatingWidth="250">
                        <xcad:LayoutAnchorablePane ScrollViewer.CanContentScroll="True">
                            <xcad:LayoutAnchorable x:Name="AnchorDiagramList"  Title="Diagrams" CanHide="True" ScrollViewer.CanContentScroll="True" ToolTip="List of Diagrams" AutoHideWidth="250" FloatingWidth="250">
                                <!--<ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">-->
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="50" />
                                        <RowDefinition Height="*" />
                                    </Grid.RowDefinitions>
                                    <Grid Grid.Row="0">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="40"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Button Name="RefreshButton" ToolTip="Refresh Data!" Grid.Column="0" Content="{md:PackIcon Kind=Restart}" Click="RefreshButton_Click" Style="{DynamicResource MaterialDesignToolForegroundButton}"/>
                                        <ComboBox Style="{StaticResource MaterialDesignFloatingHintComboBox}" md:HintAssist.Hint="Project Name" Name="cbProjects" DropDownClosed="CbProjects_DropDownClosed" VerticalAlignment="Center" HorizontalAlignment="Left" Grid.Column="2"/>
                                    </Grid>
                                    <Grid Grid.Row="1">
                                        <DataGrid x:Name="dgTreeDiagrams" VerticalGridLinesBrush="#FFDEDEDE" GridLinesVisibility="All" SelectionChanged="DgTreeDiagrams_SelectionChanged" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Row="0" Margin="55,0,0,0" AutoGenerateColumns="False" CanUserDeleteRows="False" CanUserReorderColumns="False" CanUserSortColumns="False" IsReadOnly="True" Grid.ColumnSpan="2" MouseDoubleClick="DgTreeDiagrams_MouseDoubleClick" HeadersVisibility="Column">
                                            <DataGrid.Columns>
                                                <DataGridTextColumn x:Name="RiskTree" Header="Risk Diagram" Binding="{Binding RiskTree}" />
                                            </DataGrid.Columns>
                                        </DataGrid>
                                        <StackPanel HorizontalAlignment="Left"  Margin="1,0,0,0" VerticalAlignment="Top" Width="50">
                                            <!--<Button ToolTip="Go Back!!"  x:Name="BtnBackward"  HorizontalAlignment="Left"  Click="BtnBackward_Click" Content="{md:PackIcon Kind=StepBackward}" md:ShadowAssist.ShadowDepth="Depth5"/>-->
                                            <Button x:Name="AddTree" ToolTip="Add New Diagram" HorizontalAlignment="Left" Click="AddTree_Click" Margin="0,20,0,0" Content="{md:PackIcon Kind=Plus  }" md:ShadowAssist.ShadowDepth="Depth5"/>
                                            <Button x:Name="EditTree" ToolTip="Load and Edit Diagram" HorizontalAlignment="Left" Click="EditTree_Click" Margin="0,20,0,0" Content="{md:PackIcon Kind=Pencil}" md:ShadowAssist.ShadowDepth="Depth5"/>
                                            <Button x:Name="RemoveTree" ToolTip="Remove Diagram" HorizontalAlignment="Left" Click="RemoveTree_Click" Margin="0,20,0 0" Content="{md:PackIcon Kind=Delete}" md:ShadowAssist.ShadowDepth="Depth5"/>
                                            <Button x:Name="ImportExcel" ToolTip="Load from Excel" HorizontalAlignment="Left" Click="ImportExcel_Click" Margin="0,20,0 0" Content="{md:PackIcon Kind=FileExcel}" md:ShadowAssist.ShadowDepth="Depth5"/>
                                        </StackPanel>
                                    </Grid>

                                </Grid>
                                <!--</ScrollViewer>-->
                            </xcad:LayoutAnchorable>
                            <xcad:LayoutAnchorable x:Name="AnchorRiskList" Title="Risks"  CanHide="True" ScrollViewer.CanContentScroll="True" ToolTip="List of Risks" AutoHideWidth="300" FloatingWidth="300" >
                                <Grid x:Name="GridRisksCross">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="50"/>
                                        <RowDefinition Height="50"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Grid Grid.Row="0">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <Button Style="{DynamicResource MaterialDesignToolButton}" Name="btnFilterRisk" Click="BtnFilterRisk_Click">
                                            <md:PackIcon Kind="Magnify" Opacity=".56" />
                                        </Button>
                                        <TextBox TextChanged="TxtFilterRisk_TextChanged" Name="txtFilterRisk" Grid.Column="1" Margin="8 0 0 0" md:HintAssist.Hint="Filter Risk" md:TextFieldAssist.DecorationVisibility="Hidden" BorderThickness="0" MinWidth="200" VerticalAlignment="Center" />
                                        <Button Style="{DynamicResource MaterialDesignToolButton}" Name="btnClearFilter" Click="BtnClearFilter_Click" Grid.Column="2">
                                            <md:PackIcon Kind="Close" Opacity=".56" />
                                        </Button>
                                    </Grid>
                                    <ComboBox x:Name="CbFilterWBSRisk" Margin="5" Grid.Row="1" SelectedValue="{Binding Path=IdWBSFilter}"  md:ComboBoxAssist.ClassicMode="True" Style="{StaticResource MaterialDesignFloatingHintComboBox}" DropDownClosed="CbFilterWBSRisk_DropDownClosed"  VerticalAlignment="Top" HorizontalAlignment="Left" SelectionChanged="CbFilterWBSRisk_SelectionChanged" >
                                        <md:HintAssist.Hint>
                                            <StackPanel Orientation="Horizontal" Margin="-2 0 0 0">
                                                <md:PackIcon Kind="FileTree" />
                                                <TextBlock Text="WBS Filter"/>
                                            </StackPanel>
                                        </md:HintAssist.Hint>
                                    </ComboBox>
                                    <DataGrid Grid.Row="2" x:Name="dgRisksCross" HorizontalAlignment="Stretch"  VerticalGridLinesBrush="#FFDEDEDE" GridLinesVisibility="All" VerticalAlignment="Stretch" 
                                              AutoGenerateColumns="False" CanUserSortColumns="True" CanUserReorderColumns="true"  IsReadOnly="False" Grid.ColumnSpan="2" MouseLeave="DgRisksCross_MouseLeave" 
                                              SelectedCellsChanged="DgRisksCross_SelectedCellsChanged" LostFocus="DgRisksCross_LostFocus" CanUserDeleteRows="False" SelectionChanged="DgRisksCross_SelectionChanged" 
                                              CellEditEnding="DgRisksCross_CellEditEnding" IsTextSearchEnabled="True" CanUserAddRows="False" ItemsSource="{Binding}" VerticalContentAlignment="Center" >
                                    </DataGrid>
                                </Grid>
                            </xcad:LayoutAnchorable>
                            <xcad:LayoutAnchorable x:Name="AnchorCMList"  Title="CounterMeasure"  CanHide="True" ScrollViewer.CanContentScroll="True" ToolTip="List of Countermeasure" AutoHideWidth="300" FloatingWidth="300">
                                <Grid x:Name="GridCrossCM">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="50"/>
                                        <RowDefinition Height="50"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Grid Grid.Row="0">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <Button Style="{DynamicResource MaterialDesignToolButton}" Name="btnFilterCM" Click="BtnFilterCM_Click">
                                            <md:PackIcon Kind="Magnify" Opacity=".56" />
                                        </Button>
                                        <TextBox TextChanged="TxtFilterCM_TextChanged" Name="txtFilterCM" Grid.Column="1" Margin="8 0 0 0" md:HintAssist.Hint="Filter CM" md:TextFieldAssist.DecorationVisibility="Hidden" BorderThickness="0" MinWidth="200" VerticalAlignment="Center" />
                                        <Button Style="{DynamicResource MaterialDesignToolButton}" Name="btnCloseFilterCM" Click="BtnCloseFilterCM_Click" Grid.Column="2">
                                            <md:PackIcon Kind="Close" Opacity=".56"  />
                                        </Button>
                                    </Grid>
                                    <ComboBox x:Name="CbFilterWBSCM" Margin="5" Grid.Row="1" md:ComboBoxAssist.ClassicMode="True" SelectedIndex="{Binding Path=SelectedIndex, Source=CbFilterWBSRisk, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource MaterialDesignFloatingHintComboBox}" DropDownClosed="CbFilterWBSRisk_DropDownClosed" VerticalAlignment="Top" HorizontalAlignment="Left">
                                        <md:HintAssist.Hint>
                                            <StackPanel Orientation="Horizontal" Margin="-2 0 0 0">
                                                <md:PackIcon Kind="FileTree" />
                                                <TextBlock Text="WBS Filter"/>
                                            </StackPanel>
                                        </md:HintAssist.Hint>
                                    </ComboBox>
                                    <DataGrid Grid.Row="2" x:Name="dgCrossCM" HorizontalAlignment="Stretch" VerticalGridLinesBrush="#FFDEDEDE" GridLinesVisibility="All"
                                              VerticalAlignment="Stretch" AutoGenerateColumns="False" 
                                              CanUserSortColumns="True" CanUserReorderColumns="True"  IsReadOnly="False"  Grid.ColumnSpan="2" MouseLeave="DgCrossCM_MouseLeave" SelectedCellsChanged="DgCrossCM_SelectedCellsChanged" LostFocus="DgCrossCM_LostFocus" CanUserDeleteRows="False" SelectionChanged="DgCrossCM_SelectionChanged" CellEditEnding="DgCrossCM_CellEditEnding" CanUserAddRows="False"/>
                                </Grid>
                            </xcad:LayoutAnchorable>
                            <xcad:LayoutAnchorable x:Name="AnchorGroupRisk"  Title="Groups"  CanHide="True" ScrollViewer.CanContentScroll="True" ToolTip="Groups" AutoHideWidth="300" FloatingWidth="300">
                                <Grid Name="GridGroupRisk">
                                    <TreeView x:Name="TreeViewGroup"/>
                                </Grid>
                            </xcad:LayoutAnchorable>
                        </xcad:LayoutAnchorablePane>
                    </xcad:LayoutAnchorablePaneGroup>
                </xcad:LayoutPanel>
            </xcad:LayoutRoot>
        </xcad:DockingManager>
        <Grid Grid.Row="0" x:Name="MainMenuGrid" HorizontalAlignment="Right">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="15"/>
            </Grid.ColumnDefinitions>
            <StackPanel Orientation="Horizontal"  VerticalAlignment="Top" HorizontalAlignment="Right"  Grid.Column="0">
                <ToolBarTray>
                    <ToolBar Style="{DynamicResource MaterialDesignToolBar}" ClipToBounds="False">
                        <Button x:Name="ButtonHand" Click="ButtonHand_Click"  Content="{md:PackIcon Kind=Hand}"/>
                        <Separator/>
                        <Button x:Name="MenuItemOptionNewRisk" ToolTip="New Risk (Ctrl + R)" Command="local:CustomCommands.Risk" Content="{md:PackIcon Kind=ArrowBottomRight}" />
                        <Button x:Name="MenuItemOptionNewCM" ToolTip="New CM (Ctrl + M)" Command="local:CustomCommands.CounterMeasure" Content="{md:PackIcon Kind=BlurOff}" />
                        <Separator />
                        <Button x:Name="MenuItemSave" ToolTip="Save (Ctrl + S)" Command="Save" Content="{md:PackIcon Kind=ContentSave}"/>
                        <Button x:Name="MenuItemSaveAs" ToolTip="Save As (Ctrl + Shift + S)" Command="SaveAs" Content="{md:PackIcon Kind=ContentSaveAll}"/>
                        <Button x:Name="ExportToExcel" ToolTip="Save to Excel" HorizontalAlignment="Left" Click="ExportToExcel_Click" Content="{md:PackIcon Kind=FileExport}"/>
                        <Separator/>
                        <Button x:Name="MenuItemReload" ToolTip="Restart" Click="MenuItemReload_Click" Content="{md:PackIcon Kind=Restart}" />
                        <Button x:Name="MenuItemFish_Tree" ToolTip="View current diagram as Tree" IsEnabled="True" Click="MenuItemFish_Tree_Click" Content="{md:PackIcon Kind=Lan}" Visibility="Collapsed"/>
                        <Button x:Name="MenuItemExport" ToolTip="Export to Image" Command="local:CustomCommands.Export" Content="{md:PackIcon Kind=Image}" />
                        <Button x:Name="MenuItemPrint" ToolTip="Print diagram" Command="Print" Content="{md:PackIcon Kind=Printer}" />
                        <Separator />
                    </ToolBar>
                </ToolBarTray>
                <Menu>
                    <MenuItem ToolTip="Start" x:Name="StartMenu" Icon="{md:PackIcon Kind=DotsVertical}">
                        <MenuItem x:Name="LoginMenuItem" Header="Login" Command="local:CustomCommands.Login" Icon="{md:PackIcon Kind=Lock}" InputGestureText="Ctrl+L"/>
                        <MenuItem x:Name="MenuItemNewProject" Header="Project List" Command="local:CustomCommands.Project" Icon="{md:PackIcon Kind=FileMultiple}" InputGestureText="Ctrl+J"/>
                        <MenuItem x:Name="MenuItemUserList" Header="User List" Command="local:CustomCommands.User" Icon="{md:PackIcon Kind=Users}" InputGestureText="Ctrl+U"/>
                        <MenuItem x:Name="MenuItemRoleList" Header="Role List" Command="local:CustomCommands.Role" Icon="{md:PackIcon Kind=AccountKey}" InputGestureText="Ctrl+Shift+R"/>
                        <MenuItem x:Name="MenuItemTopRisk" Header="Top Risk List" Command="local:CustomCommands.Damage" Icon="{md:PackIcon Kind=AlertOutline}" InputGestureText="Ctrl+D"/>
                        <MenuItem x:Name="MenuItemDefaultRisk" Header="Default Risk List" Command="local:CustomCommands.Default" Icon="{md:PackIcon Kind=AlertCircleOutline}" InputGestureText="Ctrl+T"/>
                        <MenuItem x:Name="MenuItemWBS" Header="Work Breakdown Structure" Command="local:CustomCommands.WBS" Icon="{md:PackIcon Kind=FileTree}" InputGestureText="Ctrl+W"/>
                        <MenuItem Header="View" Icon="{md:PackIcon Kind=Eye}">
                            <MenuItem Header="View Diagram List" Icon="{md:PackIcon Kind=ArrowTopRight}" Click="MenuItem_Click"/>
                            <MenuItem Header="View Risk List" Icon="{md:PackIcon Kind=WarningOutline}" Click="MenuItem_Click_1"/>
                            <MenuItem Header="View Counter M. List" Icon="{md:PackIcon Kind=ViewDashboard}" Click="MenuItem_Click_2"/>
                            <MenuItem Header="View Group List" Icon="{md:PackIcon Kind=Group}" Click="MenuItem_Click_3"/>
                            <MenuItem Header="View WBS" Icon="{md:PackIcon Kind=FileTree}" Command="local:CustomCommands.WBS" InputGestureText="Ctrl+W"/>
                            <MenuItem Header="View Properties" Icon="{md:PackIcon Kind=FileTree}" Command="local:CustomCommands.WBS" InputGestureText="Ctrl+Shift+P"/>
                        </MenuItem> 
                        <MenuItem x:Name="MenuItemOption" Header="Settings" Command="local:CustomCommands.Settings" Icon="{md:PackIcon Kind=Settings}" InputGestureText="Ctrl+O"/>
                        <MenuItem x:Name="MenuItemExit" Header="Exit" Click="MenuItemExit_Click" Icon="{md:PackIcon Kind=Close}" InputGestureText="Alt+F4"/>
                    </MenuItem>
                </Menu>
            </StackPanel>
        </Grid>
        <Image x:Name="ImageLanguage" Source="Images/English.png" HorizontalAlignment="Left" Margin="16,6,0,4" Width="25" RenderTransformOrigin="0.5,0.5"/>
        <ComboBox x:Name="cbLanguage" HorizontalAlignment="left" Margin="58,3,0,0" Width="162" HorizontalContentAlignment="Center" VerticalAlignment="Center" DropDownClosed="CbLanguage_DropDownClosed"/>
        <Grid Grid.Row="2">
            <ProgressBar Name="TheProgress" IsIndeterminate="True" Visibility="Hidden"/>
        </Grid>
        <md:DialogHost IsOpen="False" x:Name="ErrorDialogMessage" Grid.RowSpan="3" >
            <md:DialogHost.DialogContent >
                <StackPanel Margin="15">
                    <StackPanel Orientation="Horizontal">
                        <md:PackIcon Kind="ErrorOutline" Width="30" Height="50"/>
                        <TextBlock VerticalAlignment="Center" HorizontalAlignment="Left" Style="{StaticResource MaterialDesignTitleTextBlock}" TextWrapping="Wrap" Text="ERROR!!!" TextAlignment="Justify"/>
                    </StackPanel>
                    <StackPanel Orientation="Vertical">                       
                        <Expander HorizontalAlignment="Stretch" Header="Expand for details" IsExpanded="True">
                            <StackPanel Orientation="Vertical" TextBlock.Foreground="{DynamicResource MaterialDesignBody}" Margin="24,8,24,16">
                                <TextBlock x:Name="TextMessage" MaxWidth="500" Opacity=".68" TextAlignment="Justify" Text="" TextWrapping="Wrap" />
                            </StackPanel>
                        </Expander>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Bottom" HorizontalAlignment="Right">
                        <Button Style="{StaticResource MaterialDesignFlatButton}" IsCancel="True" Margin="0 8 8 0" Command="md:DialogHost.CloseDialogCommand">
                            CLOSE
                        </Button>
                    </StackPanel>
                </StackPanel>
            </md:DialogHost.DialogContent>
        </md:DialogHost>
        <md:DialogHost IsOpen="False" x:Name="YesNoDialog" Grid.RowSpan="3" DialogClosing="YesNoDialog_DialogClosing">
            <md:DialogHost.DialogContent>
                <StackPanel Margin="15">
                    <StackPanel Orientation="Horizontal">
                        <md:PackIcon Kind="WarningCircleOutline" Width="30" Height="50"/>
                        <TextBlock VerticalAlignment="Center" HorizontalAlignment="Left" Style="{StaticResource MaterialDesignTitleTextBlock}" TextWrapping="Wrap" Text="WARNING!!!" TextAlignment="Justify"/>
                    </StackPanel>
                    <StackPanel Orientation="Vertical" TextBlock.Foreground="{DynamicResource MaterialDesignBody}" Margin="24,8,24,16">
                        <TextBlock x:Name="TextYesNoMessage" MaxWidth="500" Opacity=".68" TextAlignment="Justify" Text="mY TEXT" TextWrapping="Wrap" />
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Bottom" HorizontalAlignment="Right">
                        <Button Style="{StaticResource MaterialDesignFlatButton}" IsCancel="True" Margin="0 8 8 0" Command="md:DialogHost.CloseDialogCommand">
                            <Button.CommandParameter>
                                <system:Boolean>True</system:Boolean>
                            </Button.CommandParameter>
                            ACCEPT
                        </Button>
                        <Button Style="{StaticResource MaterialDesignFlatButton}" IsCancel="True" Margin="0 8 8 0" Command="md:DialogHost.CloseDialogCommand">
                            <Button.CommandParameter>
                                <system:Boolean>False</system:Boolean>
                            </Button.CommandParameter>
                            CANCEL
                        </Button>
                    </StackPanel>
                </StackPanel>
            </md:DialogHost.DialogContent>
        </md:DialogHost>
        <md:DialogHost IsOpen="False" x:Name="InformationMessageDialog" Grid.RowSpan="3">
            <md:DialogHost.DialogContent>
                <StackPanel Margin="15">
                    <StackPanel Orientation="Horizontal">
                        <md:PackIcon Kind="InformationOutline" Width="30" Height="50"/>
                        <TextBlock VerticalAlignment="Center" HorizontalAlignment="Left" Style="{StaticResource MaterialDesignTitleTextBlock}" TextWrapping="Wrap" Text="INFORMATION!!!" TextAlignment="Justify"/>
                    </StackPanel>
                    <StackPanel Orientation="Vertical" TextBlock.Foreground="{DynamicResource MaterialDesignBody}" Margin="24,8,24,16">
                        <TextBlock x:Name="TextInformationMessage" MaxWidth="500" Opacity=".68" TextAlignment="Justify" Text="DEFAULT TEXT" TextWrapping="Wrap" />
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Bottom" HorizontalAlignment="Right">
                        <Button Style="{StaticResource MaterialDesignFlatButton}" IsDefault="True" Margin="0 8 8 0" Command="md:DialogHost.CloseDialogCommand">
                            <Button.CommandParameter>
                                <system:Boolean>True</system:Boolean>
                            </Button.CommandParameter>
                            ACCEPT
                        </Button>
                    </StackPanel>
                </StackPanel>
            </md:DialogHost.DialogContent>
        </md:DialogHost>
        <md:DialogHost IsOpen="False" Grid.RowSpan="3" x:Name="LoginDialog" DialogOpened="LoginDialog_DialogOpened" DialogClosing="LoginDialog_DialogClosing">
            <md:DialogHost.DialogContent >
                <StackPanel Orientation="Vertical" Margin="10">
                    <StackPanel Orientation="Horizontal">
                        <Grid HorizontalAlignment="Left" VerticalAlignment="Top" >
                            <md:PackIcon Name="IconUser" Kind="AccountCircle" Height="161" Width="152" />
                        </Grid>
                        <StackPanel Orientation="Vertical" VerticalAlignment="Center">
                            <StackPanel Orientation="Horizontal">
                                <md:PackIcon Kind="User" VerticalAlignment="Center" HorizontalAlignment="Left" Foreground="{Binding ElementName=TextUser, Path=BorderBrush}"/>
                                <TextBox md:HintAssist.Hint="User" Width="200" Margin="0,15,15,15" md:HintAssist.IsFloating="True" GotFocus="TextUser_GotFocus" x:Name="TextUser" HorizontalAlignment="Left" TextWrapping="Wrap" VerticalAlignment="Top" TabIndex="1"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <md:PackIcon Kind="TextboxPassword" VerticalAlignment="Center" HorizontalAlignment="Left" Foreground="{Binding ElementName=TextPasword, Path=BorderBrush}"/>
                                <PasswordBox md:HintAssist.Hint="Password"  Margin="0,15,15,15" Width="200" GotFocus="TextPasword_GotFocus" md:HintAssist.IsFloating="True" x:Name="TextPasword" HorizontalAlignment="Left"  VerticalAlignment="Top" TabIndex="2"/>
                            </StackPanel>
                        </StackPanel>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Bottom" HorizontalAlignment="Right">
                        <Button Style="{StaticResource MaterialDesignFlatButton}" IsDefault="True" Margin="0 8 8 0" Command="md:DialogHost.CloseDialogCommand">
                            <Button.CommandParameter>
                                <system:Boolean>True</system:Boolean>
                            </Button.CommandParameter>
                            LOGIN
                        </Button>
                        <Button Style="{StaticResource MaterialDesignFlatButton}" IsCancel="True" Margin="0 8 8 0" Command="md:DialogHost.CloseDialogCommand">
                            <Button.CommandParameter>
                                <system:Boolean>False</system:Boolean>
                            </Button.CommandParameter>
                            CLOSE
                        </Button>
                    </StackPanel>
                    <!--<StackPanel Orientation="Horizontal">
                            <Button Name="BtnLogin" Content="Login"  VerticalAlignment="Bottom" Click="Button_Click_1" HorizontalAlignment="Right"  IsDefault="True" TabIndex="3" md:ShadowAssist.ShadowDepth="Depth5"/>
                            <Button Name="BtnClose" Content="Close" VerticalAlignment="Bottom" Click="Button_Click" HorizontalAlignment="Right"  IsCancel="True" TabIndex="4" md:ShadowAssist.ShadowDepth="Depth5"/>
                        </StackPanel>-->
                </StackPanel>

            </md:DialogHost.DialogContent>
        </md:DialogHost>
    </Grid>
</Window>
